Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# 分布式架构

## 概念

### 服务器\(Server\)
- NOTE
<pre>program or process that performs services in response to requests from other processes.


服务端: 是一组程序或进程,  作用是为了响应来自其他进程的请求.</pre>

### 客户端\(Client\)
- NOTE
<pre>process that makes requests of a server by invoking an operation</pre>

### 远程调用\(Remote Invocation\)
- NOTE
<pre>complet send and response sequence

完整的发送和响应序列</pre>

### 资源\(Resource\)
- NOTE
<pre>thins shared in distributed system</pre>

#### 硬件资源\(disks,printers\)

#### 软件资源\(files,databases,data objects\)

## 要求/挑战

### 异构

### 资源共享
> collapsed=`true`


#### 控制访问

#### 命名方案

#### 控制并发

### 开放性
> collapsed=`true`


#### 需要发布组件的详细接口

#### 新组件与现有的组件容易集成

#### 解决不同接口可能导致不同的数据表示问题

### 安全

### 并发
> collapsed=`true`


#### 支持并发的组件

#### 组件的资源可以被访问,更新,共享

#### 并发可能导致的问题
> collapsed=`true`


##### 不一致

##### 未同步

### 可扩展性
> collapsed=`true`


#### 分布式系统

#### 添加更多的处理器或更快的处理器

#### 添加组件的时候,不要需要更改系统

#### 可扩展性的组件

### 容错性
> collapsed=`true`


#### 软件,硬件,网络的故障

#### 软件,硬件,网络低性能的情况下,也可以用

#### 容错的方案
> collapsed=`true`


##### 恢复

##### 冗余

### 透明性
> collapsed=`true`

- NOTE
<pre>从某个角度看似乎不存在的现象</pre>

#### 含义
> collapsed=`true`


##### 用户\(开发者\)看到的是一个整体, 而不是一堆组件的集合

##### 不同维度上的特性

#### 透明性的几个维度
> collapsed=`true`


##### 位置透明性
> collapsed=`true`


###### 不需要知道对象的位置,比如Web的页面,分布式数据库的表

##### 访问透明性
> collapsed=`true`


###### 本地访问和远程访问具有相同的操作,比如SQL查询,Web中的导航

##### 并发透明
> collapsed=`true`


###### 多个线程同时使用互不干扰的共享信息对象,比如NFS

##### 复制透明性
> collapsed=`true`


###### 用户和应用程序无须了解副本\(通过副本来提高可靠性和性能\)

##### 失败透明
> collapsed=`true`


###### 可以隐藏故障,允许用户和应用程序在其他组件出现故障的时候已经可以完成任务\.比如,数据库管理系统\.

##### 迁移透明性
> collapsed=`true`


###### 允许信息对象在一个范围内移动不影响用户操作和应用程序,比如网页,NFS

##### 性能透明性
> collapsed=`true`


###### 允许重新配置系统以改进负载变化时的性能,比如分布式make

##### 缩放透明性
> collapsed=`true`


###### 允许系统和应用规模不改变系统结构或应用算法\.

#### 两种观点\(偏向第二种\)
> collapsed=`true`


##### 1\-应该隐藏分布式的特点, 运行上和单机体系要没有区别

##### 2\-不应隐藏分布式的特定,程序应该知道在多计算机上运行\.

#### 关于透明性
> collapsed=`true`


##### 几个维度之间相互依赖
