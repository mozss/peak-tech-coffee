Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# 设计模式知识体系

## 三类23种类型

### 创造类型\(creational\)5

#### 单例模式\(Singleton\)
- NOTE
<pre>某个类只能生成一个实例，该类提供一个全局访问点供外部获取该实例，其扩展是有限多例模式。</pre>

#### 原型模式\(Prototype\)
- NOTE
<pre>将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例</pre>

#### 工厂方法\(Factory Method\)
- NOTE
<pre>定义一个用于创建产品的接口，由子类决定生成什么产品。</pre>

#### 抽象工厂\(AbstractFactory\)
- NOTE
<pre>提供一个创建产品族的接口，其每个子类都能生产一系列相关的产品。</pre>

#### 建造者\(Builder\)
- NOTE
<pre>将一个复杂对象分解成多个相对简单的部分，
然后根据不同需要分别创建它们，最后构建成该复杂对象。</pre>

### 结构类型\(structural\)7

#### 代理\(Proxy\)
- NOTE
<pre>为该对象提供一种代理以控制该对象的访问。
即客户端通过代理间接地访问该对象，从而限制，增强，或修改该对象的一些特性。</pre>

#### 适配器\(Adapter\)
- NOTE
<pre>将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能
一起工作的类可以一起工作。</pre>

#### 桥接\(Bridge\)
- NOTE
<pre>将实现和抽象分离，使它们可以独立变化。

用组合关系代替继承关系来实现。

从而降低抽象和实现两个可变维度的 耦合度。</pre>

#### 装饰\(Decorator\)
- NOTE
<pre>动态的给对象增加一些职责，即增加其额外的功能。</pre>

#### 外观\(Facade\)
- NOTE
<pre>为多个复杂的子系统提供一个一致的接口（门面），使这些子系统更加容易被访问。</pre>

#### 享元\(Flyweight\)
- NOTE
<pre>运用共享技术来有效地支持
大量细粒度
对象的复用。</pre>

#### 组合\(Composite\)
- NOTE
<pre>将对象组合成树状层次结构，使用户和堆单个对象和组合对象具有一致性的访问性。</pre>

### 行为类型\(behavior\) 11

#### 模板方法\(TemplateMethod\)
- NOTE
<pre>定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构
的情况下重新定义该算法的某些特定步骤。</pre>

#### 策略\(Strategy\)
- NOTE
<pre>定义一系列算法，并将每个算法封装起来，使得它们可以相互替换，且算法的改变不会影响使用
算法的客户。</pre>

#### 命令\(Command\)
- NOTE
<pre>将一个请求封装成一个对象，使发出请求的责任和执行请求的责任分隔开。</pre>

#### 职责链\(Chain of Responsibility\)
- NOTE
<pre>把请求从链中的一个对象传到下一个对象，直到请求被响应为止。
通过这种方式去除对象之间的耦合。</pre>

#### 状态\(State\)
- NOTE
<pre>允许一个对象在其内部状态发生变化时改变其行为能力。</pre>

#### 观察者\(Observer\)
- NOTE
<pre>多个对象之间存在一对多关系，当一个对象发生改变的时候，把这种改变通知给其他多个对象，
从而影响其他对象的行为。</pre>

#### 中介\(Mediator\)
- NOTE
<pre>定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度。
使得原有对象之间不必相互了解。</pre>

#### 迭代器\(Iterator\)
- NOTE
<pre>提供一种方法来顺序访问聚合对象中的一系列数据，而不是暴露聚合对象的内部表示。</pre>

#### 访问者\(Visitor\)
- NOTE
<pre>在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，
即每个元素有多个访问者对象的访问。</pre>

#### 备忘录\(Memento\)
- NOTE
<pre>在不破话封装性的前提下，获取并保存一个对象的内部状态，以便之后恢复它。</pre>

#### 解释器\(Interpreter\)
- NOTE
<pre>提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。</pre>

## 两种模式

### 类模式\(4\)

#### 工厂方法

#### 适配器

#### 模板方法

#### 解释器

### 对象模式\(19\)
